'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace SyncDataWebservice
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ATBLockerWebServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class ATBLockerWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LoginTITOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendKiskAlarmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private KioskLoginStaffConsoleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetKioskStaffConsoleAuthorizeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportKioskCurrentQtyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterAppScreenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterAppStepOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterKioskScreenControlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterKioskNotificationTextOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterCabinetModelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterDeviceTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterDeviceStatusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMasterMonitoringAlarmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLockerServiceRateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncKioskSysconfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncMasterKioskCabinetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncMasterKioskDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncMasterKioskLockerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServerKioskSysconfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServerKioskCabinetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServeKioskDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetServerKioskLockerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateServerSyncKioskSysconfigOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateServerSyncKioskCabinetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateServerSyncKioskDeviceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateSyncKioskLockerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SysnKioskTransactionCustomerImageOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncKioskServiceTransactionByRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncKioskServiceTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncKioskCollectTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncKioskStaffConsoleTransactionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLockerPromotionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InsertLocationPromotionSyncOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncLogTransactionActivityOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncLogFillMoneyDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncLogErrorDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SyncLogKioskAgentDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Engine.My.MySettings.Default.Engine_SyncDataWebservice_LockerSyncDataWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoginTITCompleted As LoginTITCompletedEventHandler
        
        '''<remarks/>
        Public Event SendKiskAlarmCompleted As SendKiskAlarmCompletedEventHandler
        
        '''<remarks/>
        Public Event KioskLoginStaffConsoleCompleted As KioskLoginStaffConsoleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetKioskStaffConsoleAuthorizeCompleted As GetKioskStaffConsoleAuthorizeCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportKioskCurrentQtyCompleted As ReportKioskCurrentQtyCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterAppScreenCompleted As GetMasterAppScreenCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterAppStepCompleted As GetMasterAppStepCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterKioskScreenControlCompleted As GetMasterKioskScreenControlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterKioskNotificationTextCompleted As GetMasterKioskNotificationTextCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterCabinetModelCompleted As GetMasterCabinetModelCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterDeviceTypeCompleted As GetMasterDeviceTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterDeviceStatusCompleted As GetMasterDeviceStatusCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterDeviceCompleted As GetMasterDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMasterMonitoringAlarmCompleted As GetMasterMonitoringAlarmCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLockerServiceRateCompleted As GetLockerServiceRateCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncKioskSysconfigCompleted As SyncKioskSysconfigCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncMasterKioskCabinetCompleted As SyncMasterKioskCabinetCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncMasterKioskDeviceCompleted As SyncMasterKioskDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncMasterKioskLockerCompleted As SyncMasterKioskLockerCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServerKioskSysconfigCompleted As GetServerKioskSysconfigCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServerKioskCabinetCompleted As GetServerKioskCabinetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServeKioskDeviceCompleted As GetServeKioskDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetServerKioskLockerCompleted As GetServerKioskLockerCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateServerSyncKioskSysconfigCompleted As UpdateServerSyncKioskSysconfigCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateServerSyncKioskCabinetCompleted As UpdateServerSyncKioskCabinetCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateServerSyncKioskDeviceCompleted As UpdateServerSyncKioskDeviceCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateSyncKioskLockerCompleted As UpdateSyncKioskLockerCompletedEventHandler
        
        '''<remarks/>
        Public Event SysnKioskTransactionCustomerImageCompleted As SysnKioskTransactionCustomerImageCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncKioskServiceTransactionByRecordCompleted As SyncKioskServiceTransactionByRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncKioskServiceTransactionCompleted As SyncKioskServiceTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncKioskCollectTransactionCompleted As SyncKioskCollectTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncKioskStaffConsoleTransactionCompleted As SyncKioskStaffConsoleTransactionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLockerPromotionCompleted As GetLockerPromotionCompletedEventHandler
        
        '''<remarks/>
        Public Event InsertLocationPromotionSyncCompleted As InsertLocationPromotionSyncCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncLogTransactionActivityCompleted As SyncLogTransactionActivityCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncLogFillMoneyDataCompleted As SyncLogFillMoneyDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncLogErrorDataCompleted As SyncLogErrorDataCompletedEventHandler
        
        '''<remarks/>
        Public Event SyncLogKioskAgentDataCompleted As SyncLogKioskAgentDataCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoginTIT", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginTIT(ByVal vUserName As String, ByVal vPassword As String, ByVal ModuleName As String) As LoginReturnData
            Dim results() As Object = Me.Invoke("LoginTIT", New Object() {vUserName, vPassword, ModuleName})
            Return CType(results(0),LoginReturnData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginTITAsync(ByVal vUserName As String, ByVal vPassword As String, ByVal ModuleName As String)
            Me.LoginTITAsync(vUserName, vPassword, ModuleName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginTITAsync(ByVal vUserName As String, ByVal vPassword As String, ByVal ModuleName As String, ByVal userState As Object)
            If (Me.LoginTITOperationCompleted Is Nothing) Then
                Me.LoginTITOperationCompleted = AddressOf Me.OnLoginTITOperationCompleted
            End If
            Me.InvokeAsync("LoginTIT", New Object() {vUserName, vPassword, ModuleName}, Me.LoginTITOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginTITOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginTITCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginTITCompleted(Me, New LoginTITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendKiskAlarm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendKiskAlarm(ByVal MacAddress As String, ByVal LocationName As String, ByVal AlarmDt As System.Data.DataTable) As String
            Dim results() As Object = Me.Invoke("SendKiskAlarm", New Object() {MacAddress, LocationName, AlarmDt})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendKiskAlarmAsync(ByVal MacAddress As String, ByVal LocationName As String, ByVal AlarmDt As System.Data.DataTable)
            Me.SendKiskAlarmAsync(MacAddress, LocationName, AlarmDt, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendKiskAlarmAsync(ByVal MacAddress As String, ByVal LocationName As String, ByVal AlarmDt As System.Data.DataTable, ByVal userState As Object)
            If (Me.SendKiskAlarmOperationCompleted Is Nothing) Then
                Me.SendKiskAlarmOperationCompleted = AddressOf Me.OnSendKiskAlarmOperationCompleted
            End If
            Me.InvokeAsync("SendKiskAlarm", New Object() {MacAddress, LocationName, AlarmDt}, Me.SendKiskAlarmOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendKiskAlarmOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendKiskAlarmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendKiskAlarmCompleted(Me, New SendKiskAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KioskLoginStaffConsole", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function KioskLoginStaffConsole(ByVal vUserName As String, ByVal vPassword As String, ByVal ModuleName As String, ByVal MsKioskID As String) As LoginReturnData
            Dim results() As Object = Me.Invoke("KioskLoginStaffConsole", New Object() {vUserName, vPassword, ModuleName, MsKioskID})
            Return CType(results(0),LoginReturnData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub KioskLoginStaffConsoleAsync(ByVal vUserName As String, ByVal vPassword As String, ByVal ModuleName As String, ByVal MsKioskID As String)
            Me.KioskLoginStaffConsoleAsync(vUserName, vPassword, ModuleName, MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub KioskLoginStaffConsoleAsync(ByVal vUserName As String, ByVal vPassword As String, ByVal ModuleName As String, ByVal MsKioskID As String, ByVal userState As Object)
            If (Me.KioskLoginStaffConsoleOperationCompleted Is Nothing) Then
                Me.KioskLoginStaffConsoleOperationCompleted = AddressOf Me.OnKioskLoginStaffConsoleOperationCompleted
            End If
            Me.InvokeAsync("KioskLoginStaffConsole", New Object() {vUserName, vPassword, ModuleName, MsKioskID}, Me.KioskLoginStaffConsoleOperationCompleted, userState)
        End Sub
        
        Private Sub OnKioskLoginStaffConsoleOperationCompleted(ByVal arg As Object)
            If (Not (Me.KioskLoginStaffConsoleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent KioskLoginStaffConsoleCompleted(Me, New KioskLoginStaffConsoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKioskStaffConsoleAuthorize", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetKioskStaffConsoleAuthorize(ByVal Username As String, ByVal MsKioskID As Long) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetKioskStaffConsoleAuthorize", New Object() {Username, MsKioskID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetKioskStaffConsoleAuthorizeAsync(ByVal Username As String, ByVal MsKioskID As Long)
            Me.GetKioskStaffConsoleAuthorizeAsync(Username, MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetKioskStaffConsoleAuthorizeAsync(ByVal Username As String, ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetKioskStaffConsoleAuthorizeOperationCompleted Is Nothing) Then
                Me.GetKioskStaffConsoleAuthorizeOperationCompleted = AddressOf Me.OnGetKioskStaffConsoleAuthorizeOperationCompleted
            End If
            Me.InvokeAsync("GetKioskStaffConsoleAuthorize", New Object() {Username, MsKioskID}, Me.GetKioskStaffConsoleAuthorizeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetKioskStaffConsoleAuthorizeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetKioskStaffConsoleAuthorizeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetKioskStaffConsoleAuthorizeCompleted(Me, New GetKioskStaffConsoleAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReportKioskCurrentQty", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportKioskCurrentQty(ByVal KioskComName As String, ByVal KioskID As Integer, ByVal DeviceID As Long, ByVal CurrentQty As Integer) As Boolean
            Dim results() As Object = Me.Invoke("ReportKioskCurrentQty", New Object() {KioskComName, KioskID, DeviceID, CurrentQty})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportKioskCurrentQtyAsync(ByVal KioskComName As String, ByVal KioskID As Integer, ByVal DeviceID As Long, ByVal CurrentQty As Integer)
            Me.ReportKioskCurrentQtyAsync(KioskComName, KioskID, DeviceID, CurrentQty, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportKioskCurrentQtyAsync(ByVal KioskComName As String, ByVal KioskID As Integer, ByVal DeviceID As Long, ByVal CurrentQty As Integer, ByVal userState As Object)
            If (Me.ReportKioskCurrentQtyOperationCompleted Is Nothing) Then
                Me.ReportKioskCurrentQtyOperationCompleted = AddressOf Me.OnReportKioskCurrentQtyOperationCompleted
            End If
            Me.InvokeAsync("ReportKioskCurrentQty", New Object() {KioskComName, KioskID, DeviceID, CurrentQty}, Me.ReportKioskCurrentQtyOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportKioskCurrentQtyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportKioskCurrentQtyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportKioskCurrentQtyCompleted(Me, New ReportKioskCurrentQtyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterAppScreen", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterAppScreen() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterAppScreen", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterAppScreenAsync()
            Me.GetMasterAppScreenAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterAppScreenAsync(ByVal userState As Object)
            If (Me.GetMasterAppScreenOperationCompleted Is Nothing) Then
                Me.GetMasterAppScreenOperationCompleted = AddressOf Me.OnGetMasterAppScreenOperationCompleted
            End If
            Me.InvokeAsync("GetMasterAppScreen", New Object(-1) {}, Me.GetMasterAppScreenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterAppScreenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterAppScreenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterAppScreenCompleted(Me, New GetMasterAppScreenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterAppStep", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterAppStep() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterAppStep", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterAppStepAsync()
            Me.GetMasterAppStepAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterAppStepAsync(ByVal userState As Object)
            If (Me.GetMasterAppStepOperationCompleted Is Nothing) Then
                Me.GetMasterAppStepOperationCompleted = AddressOf Me.OnGetMasterAppStepOperationCompleted
            End If
            Me.InvokeAsync("GetMasterAppStep", New Object(-1) {}, Me.GetMasterAppStepOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterAppStepOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterAppStepCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterAppStepCompleted(Me, New GetMasterAppStepCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterKioskScreenControl", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterKioskScreenControl() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterKioskScreenControl", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterKioskScreenControlAsync()
            Me.GetMasterKioskScreenControlAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterKioskScreenControlAsync(ByVal userState As Object)
            If (Me.GetMasterKioskScreenControlOperationCompleted Is Nothing) Then
                Me.GetMasterKioskScreenControlOperationCompleted = AddressOf Me.OnGetMasterKioskScreenControlOperationCompleted
            End If
            Me.InvokeAsync("GetMasterKioskScreenControl", New Object(-1) {}, Me.GetMasterKioskScreenControlOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterKioskScreenControlOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterKioskScreenControlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterKioskScreenControlCompleted(Me, New GetMasterKioskScreenControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterKioskNotificationText", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterKioskNotificationText() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterKioskNotificationText", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterKioskNotificationTextAsync()
            Me.GetMasterKioskNotificationTextAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterKioskNotificationTextAsync(ByVal userState As Object)
            If (Me.GetMasterKioskNotificationTextOperationCompleted Is Nothing) Then
                Me.GetMasterKioskNotificationTextOperationCompleted = AddressOf Me.OnGetMasterKioskNotificationTextOperationCompleted
            End If
            Me.InvokeAsync("GetMasterKioskNotificationText", New Object(-1) {}, Me.GetMasterKioskNotificationTextOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterKioskNotificationTextOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterKioskNotificationTextCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterKioskNotificationTextCompleted(Me, New GetMasterKioskNotificationTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterCabinetModel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterCabinetModel() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterCabinetModel", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterCabinetModelAsync()
            Me.GetMasterCabinetModelAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterCabinetModelAsync(ByVal userState As Object)
            If (Me.GetMasterCabinetModelOperationCompleted Is Nothing) Then
                Me.GetMasterCabinetModelOperationCompleted = AddressOf Me.OnGetMasterCabinetModelOperationCompleted
            End If
            Me.InvokeAsync("GetMasterCabinetModel", New Object(-1) {}, Me.GetMasterCabinetModelOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterCabinetModelOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterCabinetModelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterCabinetModelCompleted(Me, New GetMasterCabinetModelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterDeviceType", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterDeviceType() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterDeviceType", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterDeviceTypeAsync()
            Me.GetMasterDeviceTypeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterDeviceTypeAsync(ByVal userState As Object)
            If (Me.GetMasterDeviceTypeOperationCompleted Is Nothing) Then
                Me.GetMasterDeviceTypeOperationCompleted = AddressOf Me.OnGetMasterDeviceTypeOperationCompleted
            End If
            Me.InvokeAsync("GetMasterDeviceType", New Object(-1) {}, Me.GetMasterDeviceTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterDeviceTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterDeviceTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterDeviceTypeCompleted(Me, New GetMasterDeviceTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterDeviceStatus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterDeviceStatus() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterDeviceStatus", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterDeviceStatusAsync()
            Me.GetMasterDeviceStatusAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterDeviceStatusAsync(ByVal userState As Object)
            If (Me.GetMasterDeviceStatusOperationCompleted Is Nothing) Then
                Me.GetMasterDeviceStatusOperationCompleted = AddressOf Me.OnGetMasterDeviceStatusOperationCompleted
            End If
            Me.InvokeAsync("GetMasterDeviceStatus", New Object(-1) {}, Me.GetMasterDeviceStatusOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterDeviceStatusOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterDeviceStatusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterDeviceStatusCompleted(Me, New GetMasterDeviceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterDevice() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterDevice", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterDeviceAsync()
            Me.GetMasterDeviceAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterDeviceAsync(ByVal userState As Object)
            If (Me.GetMasterDeviceOperationCompleted Is Nothing) Then
                Me.GetMasterDeviceOperationCompleted = AddressOf Me.OnGetMasterDeviceOperationCompleted
            End If
            Me.InvokeAsync("GetMasterDevice", New Object(-1) {}, Me.GetMasterDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterDeviceCompleted(Me, New GetMasterDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMasterMonitoringAlarm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMasterMonitoringAlarm() As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetMasterMonitoringAlarm", New Object(-1) {})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMasterMonitoringAlarmAsync()
            Me.GetMasterMonitoringAlarmAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMasterMonitoringAlarmAsync(ByVal userState As Object)
            If (Me.GetMasterMonitoringAlarmOperationCompleted Is Nothing) Then
                Me.GetMasterMonitoringAlarmOperationCompleted = AddressOf Me.OnGetMasterMonitoringAlarmOperationCompleted
            End If
            Me.InvokeAsync("GetMasterMonitoringAlarm", New Object(-1) {}, Me.GetMasterMonitoringAlarmOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMasterMonitoringAlarmOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMasterMonitoringAlarmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMasterMonitoringAlarmCompleted(Me, New GetMasterMonitoringAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLockerServiceRate", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLockerServiceRate(ByVal MsKioskID As Long) As MasterServiceRateData
            Dim results() As Object = Me.Invoke("GetLockerServiceRate", New Object() {MsKioskID})
            Return CType(results(0),MasterServiceRateData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLockerServiceRateAsync(ByVal MsKioskID As Long)
            Me.GetLockerServiceRateAsync(MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLockerServiceRateAsync(ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetLockerServiceRateOperationCompleted Is Nothing) Then
                Me.GetLockerServiceRateOperationCompleted = AddressOf Me.OnGetLockerServiceRateOperationCompleted
            End If
            Me.InvokeAsync("GetLockerServiceRate", New Object() {MsKioskID}, Me.GetLockerServiceRateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLockerServiceRateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLockerServiceRateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLockerServiceRateCompleted(Me, New GetLockerServiceRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncKioskSysconfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncKioskSysconfig(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncKioskSysconfig", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncKioskSysconfigAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncKioskSysconfigAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncKioskSysconfigAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncKioskSysconfigOperationCompleted Is Nothing) Then
                Me.SyncKioskSysconfigOperationCompleted = AddressOf Me.OnSyncKioskSysconfigOperationCompleted
            End If
            Me.InvokeAsync("SyncKioskSysconfig", New Object() {dt, KioskName}, Me.SyncKioskSysconfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncKioskSysconfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncKioskSysconfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncKioskSysconfigCompleted(Me, New SyncKioskSysconfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncMasterKioskCabinet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncMasterKioskCabinet(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncMasterKioskCabinet", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncMasterKioskCabinetAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncMasterKioskCabinetAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncMasterKioskCabinetAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncMasterKioskCabinetOperationCompleted Is Nothing) Then
                Me.SyncMasterKioskCabinetOperationCompleted = AddressOf Me.OnSyncMasterKioskCabinetOperationCompleted
            End If
            Me.InvokeAsync("SyncMasterKioskCabinet", New Object() {dt, KioskName}, Me.SyncMasterKioskCabinetOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncMasterKioskCabinetOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncMasterKioskCabinetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncMasterKioskCabinetCompleted(Me, New SyncMasterKioskCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncMasterKioskDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncMasterKioskDevice(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncMasterKioskDevice", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncMasterKioskDeviceAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncMasterKioskDeviceAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncMasterKioskDeviceAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncMasterKioskDeviceOperationCompleted Is Nothing) Then
                Me.SyncMasterKioskDeviceOperationCompleted = AddressOf Me.OnSyncMasterKioskDeviceOperationCompleted
            End If
            Me.InvokeAsync("SyncMasterKioskDevice", New Object() {dt, KioskName}, Me.SyncMasterKioskDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncMasterKioskDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncMasterKioskDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncMasterKioskDeviceCompleted(Me, New SyncMasterKioskDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncMasterKioskLocker", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncMasterKioskLocker(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncMasterKioskLocker", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncMasterKioskLockerAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncMasterKioskLockerAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncMasterKioskLockerAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncMasterKioskLockerOperationCompleted Is Nothing) Then
                Me.SyncMasterKioskLockerOperationCompleted = AddressOf Me.OnSyncMasterKioskLockerOperationCompleted
            End If
            Me.InvokeAsync("SyncMasterKioskLocker", New Object() {dt, KioskName}, Me.SyncMasterKioskLockerOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncMasterKioskLockerOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncMasterKioskLockerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncMasterKioskLockerCompleted(Me, New SyncMasterKioskLockerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerKioskSysconfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerKioskSysconfig(ByVal MsKioskID As Long) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetServerKioskSysconfig", New Object() {MsKioskID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServerKioskSysconfigAsync(ByVal MsKioskID As Long)
            Me.GetServerKioskSysconfigAsync(MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServerKioskSysconfigAsync(ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetServerKioskSysconfigOperationCompleted Is Nothing) Then
                Me.GetServerKioskSysconfigOperationCompleted = AddressOf Me.OnGetServerKioskSysconfigOperationCompleted
            End If
            Me.InvokeAsync("GetServerKioskSysconfig", New Object() {MsKioskID}, Me.GetServerKioskSysconfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServerKioskSysconfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServerKioskSysconfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServerKioskSysconfigCompleted(Me, New GetServerKioskSysconfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerKioskCabinet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerKioskCabinet(ByVal MsKioskID As Long) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetServerKioskCabinet", New Object() {MsKioskID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServerKioskCabinetAsync(ByVal MsKioskID As Long)
            Me.GetServerKioskCabinetAsync(MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServerKioskCabinetAsync(ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetServerKioskCabinetOperationCompleted Is Nothing) Then
                Me.GetServerKioskCabinetOperationCompleted = AddressOf Me.OnGetServerKioskCabinetOperationCompleted
            End If
            Me.InvokeAsync("GetServerKioskCabinet", New Object() {MsKioskID}, Me.GetServerKioskCabinetOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServerKioskCabinetOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServerKioskCabinetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServerKioskCabinetCompleted(Me, New GetServerKioskCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServeKioskDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServeKioskDevice(ByVal MsKioskID As Long) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetServeKioskDevice", New Object() {MsKioskID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServeKioskDeviceAsync(ByVal MsKioskID As Long)
            Me.GetServeKioskDeviceAsync(MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServeKioskDeviceAsync(ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetServeKioskDeviceOperationCompleted Is Nothing) Then
                Me.GetServeKioskDeviceOperationCompleted = AddressOf Me.OnGetServeKioskDeviceOperationCompleted
            End If
            Me.InvokeAsync("GetServeKioskDevice", New Object() {MsKioskID}, Me.GetServeKioskDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServeKioskDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServeKioskDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServeKioskDeviceCompleted(Me, New GetServeKioskDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerKioskLocker", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerKioskLocker(ByVal MsKioskID As Long) As System.Data.DataTable
            Dim results() As Object = Me.Invoke("GetServerKioskLocker", New Object() {MsKioskID})
            Return CType(results(0),System.Data.DataTable)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetServerKioskLockerAsync(ByVal MsKioskID As Long)
            Me.GetServerKioskLockerAsync(MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetServerKioskLockerAsync(ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetServerKioskLockerOperationCompleted Is Nothing) Then
                Me.GetServerKioskLockerOperationCompleted = AddressOf Me.OnGetServerKioskLockerOperationCompleted
            End If
            Me.InvokeAsync("GetServerKioskLocker", New Object() {MsKioskID}, Me.GetServerKioskLockerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetServerKioskLockerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetServerKioskLockerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetServerKioskLockerCompleted(Me, New GetServerKioskLockerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServerSyncKioskSysconfig", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateServerSyncKioskSysconfig(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("UpdateServerSyncKioskSysconfig", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateServerSyncKioskSysconfigAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.UpdateServerSyncKioskSysconfigAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateServerSyncKioskSysconfigAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.UpdateServerSyncKioskSysconfigOperationCompleted Is Nothing) Then
                Me.UpdateServerSyncKioskSysconfigOperationCompleted = AddressOf Me.OnUpdateServerSyncKioskSysconfigOperationCompleted
            End If
            Me.InvokeAsync("UpdateServerSyncKioskSysconfig", New Object() {dt, KioskName}, Me.UpdateServerSyncKioskSysconfigOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateServerSyncKioskSysconfigOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServerSyncKioskSysconfigCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateServerSyncKioskSysconfigCompleted(Me, New UpdateServerSyncKioskSysconfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServerSyncKioskCabinet", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateServerSyncKioskCabinet(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("UpdateServerSyncKioskCabinet", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateServerSyncKioskCabinetAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.UpdateServerSyncKioskCabinetAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateServerSyncKioskCabinetAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.UpdateServerSyncKioskCabinetOperationCompleted Is Nothing) Then
                Me.UpdateServerSyncKioskCabinetOperationCompleted = AddressOf Me.OnUpdateServerSyncKioskCabinetOperationCompleted
            End If
            Me.InvokeAsync("UpdateServerSyncKioskCabinet", New Object() {dt, KioskName}, Me.UpdateServerSyncKioskCabinetOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateServerSyncKioskCabinetOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServerSyncKioskCabinetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateServerSyncKioskCabinetCompleted(Me, New UpdateServerSyncKioskCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateServerSyncKioskDevice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateServerSyncKioskDevice(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("UpdateServerSyncKioskDevice", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateServerSyncKioskDeviceAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.UpdateServerSyncKioskDeviceAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateServerSyncKioskDeviceAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.UpdateServerSyncKioskDeviceOperationCompleted Is Nothing) Then
                Me.UpdateServerSyncKioskDeviceOperationCompleted = AddressOf Me.OnUpdateServerSyncKioskDeviceOperationCompleted
            End If
            Me.InvokeAsync("UpdateServerSyncKioskDevice", New Object() {dt, KioskName}, Me.UpdateServerSyncKioskDeviceOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateServerSyncKioskDeviceOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateServerSyncKioskDeviceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateServerSyncKioskDeviceCompleted(Me, New UpdateServerSyncKioskDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSyncKioskLocker", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateSyncKioskLocker(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("UpdateSyncKioskLocker", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateSyncKioskLockerAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.UpdateSyncKioskLockerAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateSyncKioskLockerAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.UpdateSyncKioskLockerOperationCompleted Is Nothing) Then
                Me.UpdateSyncKioskLockerOperationCompleted = AddressOf Me.OnUpdateSyncKioskLockerOperationCompleted
            End If
            Me.InvokeAsync("UpdateSyncKioskLocker", New Object() {dt, KioskName}, Me.UpdateSyncKioskLockerOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateSyncKioskLockerOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateSyncKioskLockerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateSyncKioskLockerCompleted(Me, New UpdateSyncKioskLockerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SysnKioskTransactionCustomerImage", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SysnKioskTransactionCustomerImage(ByVal KioskName As String, ByVal TransNo As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal CustImage() As Byte) As String
            Dim results() As Object = Me.Invoke("SysnKioskTransactionCustomerImage", New Object() {KioskName, TransNo, CustImage})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SysnKioskTransactionCustomerImageAsync(ByVal KioskName As String, ByVal TransNo As String, ByVal CustImage() As Byte)
            Me.SysnKioskTransactionCustomerImageAsync(KioskName, TransNo, CustImage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SysnKioskTransactionCustomerImageAsync(ByVal KioskName As String, ByVal TransNo As String, ByVal CustImage() As Byte, ByVal userState As Object)
            If (Me.SysnKioskTransactionCustomerImageOperationCompleted Is Nothing) Then
                Me.SysnKioskTransactionCustomerImageOperationCompleted = AddressOf Me.OnSysnKioskTransactionCustomerImageOperationCompleted
            End If
            Me.InvokeAsync("SysnKioskTransactionCustomerImage", New Object() {KioskName, TransNo, CustImage}, Me.SysnKioskTransactionCustomerImageOperationCompleted, userState)
        End Sub
        
        Private Sub OnSysnKioskTransactionCustomerImageOperationCompleted(ByVal arg As Object)
            If (Not (Me.SysnKioskTransactionCustomerImageCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SysnKioskTransactionCustomerImageCompleted(Me, New SysnKioskTransactionCustomerImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncKioskServiceTransactionByRecord", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncKioskServiceTransactionByRecord( _
                    ByVal KioskName As String,  _
                    ByVal TransNo As String,  _
                    ByVal TransStartTime As Date,  _
                    ByVal TransEndTime As Date,  _
                    ByVal MsKioskID As Long,  _
                    ByVal ServerLockerID As Long,  _
                    ByVal PassportNo As String,  _
                    ByVal IDCardNo As String,  _
                    ByVal NationCode As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal Gender As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal PassportExpireDate As Date,  _
                    ByVal IDCardExpireDate As Date,  _
                    ByVal ServiceRate As Double,  _
                    ByVal ServiceRateLimitDay As Double,  _
                    ByVal DepositAmt As Double,  _
                    ByVal PaidTime As Date,  _
                    ByVal ReceiveCoin1 As Long,  _
                    ByVal ReceiveCoin2 As Long,  _
                    ByVal ReceiveCoin5 As Long,  _
                    ByVal ReceiveCoin10 As Long,  _
                    ByVal ReceiveBanknote20 As Long,  _
                    ByVal ReceiveBanknote50 As Long,  _
                    ByVal ReceiveBanknote100 As Long,  _
                    ByVal ReceiveBanknote500 As Long,  _
                    ByVal ReceiveBanknote1000 As Long,  _
                    ByVal ChangeCoin1 As Long,  _
                    ByVal ChangeCoin2 As Long,  _
                    ByVal ChangeCoin5 As Long,  _
                    ByVal ChangeCoin10 As Long,  _
                    ByVal ChangeBankNote20 As Long,  _
                    ByVal ChangeBanknote50 As Long,  _
                    ByVal ChangeBanknote100 As Long,  _
                    ByVal ChangeBanknote500 As Long,  _
                    ByVal TransStatus As String,  _
                    ByVal MsAppScreenID As Long,  _
                    ByVal MsAppStepID As Long) As String
            Dim results() As Object = Me.Invoke("SyncKioskServiceTransactionByRecord", New Object() {KioskName, TransNo, TransStartTime, TransEndTime, MsKioskID, ServerLockerID, PassportNo, IDCardNo, NationCode, FirstName, LastName, Gender, BirthDate, PassportExpireDate, IDCardExpireDate, ServiceRate, ServiceRateLimitDay, DepositAmt, PaidTime, ReceiveCoin1, ReceiveCoin2, ReceiveCoin5, ReceiveCoin10, ReceiveBanknote20, ReceiveBanknote50, ReceiveBanknote100, ReceiveBanknote500, ReceiveBanknote1000, ChangeCoin1, ChangeCoin2, ChangeCoin5, ChangeCoin10, ChangeBankNote20, ChangeBanknote50, ChangeBanknote100, ChangeBanknote500, TransStatus, MsAppScreenID, MsAppStepID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncKioskServiceTransactionByRecordAsync( _
                    ByVal KioskName As String,  _
                    ByVal TransNo As String,  _
                    ByVal TransStartTime As Date,  _
                    ByVal TransEndTime As Date,  _
                    ByVal MsKioskID As Long,  _
                    ByVal ServerLockerID As Long,  _
                    ByVal PassportNo As String,  _
                    ByVal IDCardNo As String,  _
                    ByVal NationCode As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal Gender As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal PassportExpireDate As Date,  _
                    ByVal IDCardExpireDate As Date,  _
                    ByVal ServiceRate As Double,  _
                    ByVal ServiceRateLimitDay As Double,  _
                    ByVal DepositAmt As Double,  _
                    ByVal PaidTime As Date,  _
                    ByVal ReceiveCoin1 As Long,  _
                    ByVal ReceiveCoin2 As Long,  _
                    ByVal ReceiveCoin5 As Long,  _
                    ByVal ReceiveCoin10 As Long,  _
                    ByVal ReceiveBanknote20 As Long,  _
                    ByVal ReceiveBanknote50 As Long,  _
                    ByVal ReceiveBanknote100 As Long,  _
                    ByVal ReceiveBanknote500 As Long,  _
                    ByVal ReceiveBanknote1000 As Long,  _
                    ByVal ChangeCoin1 As Long,  _
                    ByVal ChangeCoin2 As Long,  _
                    ByVal ChangeCoin5 As Long,  _
                    ByVal ChangeCoin10 As Long,  _
                    ByVal ChangeBankNote20 As Long,  _
                    ByVal ChangeBanknote50 As Long,  _
                    ByVal ChangeBanknote100 As Long,  _
                    ByVal ChangeBanknote500 As Long,  _
                    ByVal TransStatus As String,  _
                    ByVal MsAppScreenID As Long,  _
                    ByVal MsAppStepID As Long)
            Me.SyncKioskServiceTransactionByRecordAsync(KioskName, TransNo, TransStartTime, TransEndTime, MsKioskID, ServerLockerID, PassportNo, IDCardNo, NationCode, FirstName, LastName, Gender, BirthDate, PassportExpireDate, IDCardExpireDate, ServiceRate, ServiceRateLimitDay, DepositAmt, PaidTime, ReceiveCoin1, ReceiveCoin2, ReceiveCoin5, ReceiveCoin10, ReceiveBanknote20, ReceiveBanknote50, ReceiveBanknote100, ReceiveBanknote500, ReceiveBanknote1000, ChangeCoin1, ChangeCoin2, ChangeCoin5, ChangeCoin10, ChangeBankNote20, ChangeBanknote50, ChangeBanknote100, ChangeBanknote500, TransStatus, MsAppScreenID, MsAppStepID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncKioskServiceTransactionByRecordAsync( _
                    ByVal KioskName As String,  _
                    ByVal TransNo As String,  _
                    ByVal TransStartTime As Date,  _
                    ByVal TransEndTime As Date,  _
                    ByVal MsKioskID As Long,  _
                    ByVal ServerLockerID As Long,  _
                    ByVal PassportNo As String,  _
                    ByVal IDCardNo As String,  _
                    ByVal NationCode As String,  _
                    ByVal FirstName As String,  _
                    ByVal LastName As String,  _
                    ByVal Gender As String,  _
                    ByVal BirthDate As Date,  _
                    ByVal PassportExpireDate As Date,  _
                    ByVal IDCardExpireDate As Date,  _
                    ByVal ServiceRate As Double,  _
                    ByVal ServiceRateLimitDay As Double,  _
                    ByVal DepositAmt As Double,  _
                    ByVal PaidTime As Date,  _
                    ByVal ReceiveCoin1 As Long,  _
                    ByVal ReceiveCoin2 As Long,  _
                    ByVal ReceiveCoin5 As Long,  _
                    ByVal ReceiveCoin10 As Long,  _
                    ByVal ReceiveBanknote20 As Long,  _
                    ByVal ReceiveBanknote50 As Long,  _
                    ByVal ReceiveBanknote100 As Long,  _
                    ByVal ReceiveBanknote500 As Long,  _
                    ByVal ReceiveBanknote1000 As Long,  _
                    ByVal ChangeCoin1 As Long,  _
                    ByVal ChangeCoin2 As Long,  _
                    ByVal ChangeCoin5 As Long,  _
                    ByVal ChangeCoin10 As Long,  _
                    ByVal ChangeBankNote20 As Long,  _
                    ByVal ChangeBanknote50 As Long,  _
                    ByVal ChangeBanknote100 As Long,  _
                    ByVal ChangeBanknote500 As Long,  _
                    ByVal TransStatus As String,  _
                    ByVal MsAppScreenID As Long,  _
                    ByVal MsAppStepID As Long,  _
                    ByVal userState As Object)
            If (Me.SyncKioskServiceTransactionByRecordOperationCompleted Is Nothing) Then
                Me.SyncKioskServiceTransactionByRecordOperationCompleted = AddressOf Me.OnSyncKioskServiceTransactionByRecordOperationCompleted
            End If
            Me.InvokeAsync("SyncKioskServiceTransactionByRecord", New Object() {KioskName, TransNo, TransStartTime, TransEndTime, MsKioskID, ServerLockerID, PassportNo, IDCardNo, NationCode, FirstName, LastName, Gender, BirthDate, PassportExpireDate, IDCardExpireDate, ServiceRate, ServiceRateLimitDay, DepositAmt, PaidTime, ReceiveCoin1, ReceiveCoin2, ReceiveCoin5, ReceiveCoin10, ReceiveBanknote20, ReceiveBanknote50, ReceiveBanknote100, ReceiveBanknote500, ReceiveBanknote1000, ChangeCoin1, ChangeCoin2, ChangeCoin5, ChangeCoin10, ChangeBankNote20, ChangeBanknote50, ChangeBanknote100, ChangeBanknote500, TransStatus, MsAppScreenID, MsAppStepID}, Me.SyncKioskServiceTransactionByRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncKioskServiceTransactionByRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncKioskServiceTransactionByRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncKioskServiceTransactionByRecordCompleted(Me, New SyncKioskServiceTransactionByRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncKioskServiceTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncKioskServiceTransaction(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncKioskServiceTransaction", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncKioskServiceTransactionAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncKioskServiceTransactionAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncKioskServiceTransactionAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncKioskServiceTransactionOperationCompleted Is Nothing) Then
                Me.SyncKioskServiceTransactionOperationCompleted = AddressOf Me.OnSyncKioskServiceTransactionOperationCompleted
            End If
            Me.InvokeAsync("SyncKioskServiceTransaction", New Object() {dt, KioskName}, Me.SyncKioskServiceTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncKioskServiceTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncKioskServiceTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncKioskServiceTransactionCompleted(Me, New SyncKioskServiceTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncKioskCollectTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncKioskCollectTransaction(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncKioskCollectTransaction", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncKioskCollectTransactionAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncKioskCollectTransactionAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncKioskCollectTransactionAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncKioskCollectTransactionOperationCompleted Is Nothing) Then
                Me.SyncKioskCollectTransactionOperationCompleted = AddressOf Me.OnSyncKioskCollectTransactionOperationCompleted
            End If
            Me.InvokeAsync("SyncKioskCollectTransaction", New Object() {dt, KioskName}, Me.SyncKioskCollectTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncKioskCollectTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncKioskCollectTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncKioskCollectTransactionCompleted(Me, New SyncKioskCollectTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncKioskStaffConsoleTransaction", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncKioskStaffConsoleTransaction(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncKioskStaffConsoleTransaction", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncKioskStaffConsoleTransactionAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncKioskStaffConsoleTransactionAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncKioskStaffConsoleTransactionAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncKioskStaffConsoleTransactionOperationCompleted Is Nothing) Then
                Me.SyncKioskStaffConsoleTransactionOperationCompleted = AddressOf Me.OnSyncKioskStaffConsoleTransactionOperationCompleted
            End If
            Me.InvokeAsync("SyncKioskStaffConsoleTransaction", New Object() {dt, KioskName}, Me.SyncKioskStaffConsoleTransactionOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncKioskStaffConsoleTransactionOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncKioskStaffConsoleTransactionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncKioskStaffConsoleTransactionCompleted(Me, New SyncKioskStaffConsoleTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLockerPromotion", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLockerPromotion(ByVal MsKioskID As Long) As MasterPromotionData
            Dim results() As Object = Me.Invoke("GetLockerPromotion", New Object() {MsKioskID})
            Return CType(results(0),MasterPromotionData)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLockerPromotionAsync(ByVal MsKioskID As Long)
            Me.GetLockerPromotionAsync(MsKioskID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLockerPromotionAsync(ByVal MsKioskID As Long, ByVal userState As Object)
            If (Me.GetLockerPromotionOperationCompleted Is Nothing) Then
                Me.GetLockerPromotionOperationCompleted = AddressOf Me.OnGetLockerPromotionOperationCompleted
            End If
            Me.InvokeAsync("GetLockerPromotion", New Object() {MsKioskID}, Me.GetLockerPromotionOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLockerPromotionOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLockerPromotionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLockerPromotionCompleted(Me, New GetLockerPromotionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLocationPromotionSync", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InsertLocationPromotionSync(ByVal LocationPromotionID As Long, ByVal MsKioskID As Long, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("InsertLocationPromotionSync", New Object() {LocationPromotionID, MsKioskID, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InsertLocationPromotionSyncAsync(ByVal LocationPromotionID As Long, ByVal MsKioskID As Long, ByVal KioskName As String)
            Me.InsertLocationPromotionSyncAsync(LocationPromotionID, MsKioskID, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InsertLocationPromotionSyncAsync(ByVal LocationPromotionID As Long, ByVal MsKioskID As Long, ByVal KioskName As String, ByVal userState As Object)
            If (Me.InsertLocationPromotionSyncOperationCompleted Is Nothing) Then
                Me.InsertLocationPromotionSyncOperationCompleted = AddressOf Me.OnInsertLocationPromotionSyncOperationCompleted
            End If
            Me.InvokeAsync("InsertLocationPromotionSync", New Object() {LocationPromotionID, MsKioskID, KioskName}, Me.InsertLocationPromotionSyncOperationCompleted, userState)
        End Sub
        
        Private Sub OnInsertLocationPromotionSyncOperationCompleted(ByVal arg As Object)
            If (Not (Me.InsertLocationPromotionSyncCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InsertLocationPromotionSyncCompleted(Me, New InsertLocationPromotionSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncLogTransactionActivity", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncLogTransactionActivity(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncLogTransactionActivity", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncLogTransactionActivityAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncLogTransactionActivityAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncLogTransactionActivityAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncLogTransactionActivityOperationCompleted Is Nothing) Then
                Me.SyncLogTransactionActivityOperationCompleted = AddressOf Me.OnSyncLogTransactionActivityOperationCompleted
            End If
            Me.InvokeAsync("SyncLogTransactionActivity", New Object() {dt, KioskName}, Me.SyncLogTransactionActivityOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncLogTransactionActivityOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncLogTransactionActivityCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncLogTransactionActivityCompleted(Me, New SyncLogTransactionActivityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncLogFillMoneyData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncLogFillMoneyData(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncLogFillMoneyData", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncLogFillMoneyDataAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncLogFillMoneyDataAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncLogFillMoneyDataAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncLogFillMoneyDataOperationCompleted Is Nothing) Then
                Me.SyncLogFillMoneyDataOperationCompleted = AddressOf Me.OnSyncLogFillMoneyDataOperationCompleted
            End If
            Me.InvokeAsync("SyncLogFillMoneyData", New Object() {dt, KioskName}, Me.SyncLogFillMoneyDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncLogFillMoneyDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncLogFillMoneyDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncLogFillMoneyDataCompleted(Me, New SyncLogFillMoneyDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncLogErrorData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncLogErrorData(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncLogErrorData", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncLogErrorDataAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncLogErrorDataAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncLogErrorDataAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncLogErrorDataOperationCompleted Is Nothing) Then
                Me.SyncLogErrorDataOperationCompleted = AddressOf Me.OnSyncLogErrorDataOperationCompleted
            End If
            Me.InvokeAsync("SyncLogErrorData", New Object() {dt, KioskName}, Me.SyncLogErrorDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncLogErrorDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncLogErrorDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncLogErrorDataCompleted(Me, New SyncLogErrorDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SyncLogKioskAgentData", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncLogKioskAgentData(ByVal dt As System.Data.DataTable, ByVal KioskName As String) As String
            Dim results() As Object = Me.Invoke("SyncLogKioskAgentData", New Object() {dt, KioskName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SyncLogKioskAgentDataAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String)
            Me.SyncLogKioskAgentDataAsync(dt, KioskName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SyncLogKioskAgentDataAsync(ByVal dt As System.Data.DataTable, ByVal KioskName As String, ByVal userState As Object)
            If (Me.SyncLogKioskAgentDataOperationCompleted Is Nothing) Then
                Me.SyncLogKioskAgentDataOperationCompleted = AddressOf Me.OnSyncLogKioskAgentDataOperationCompleted
            End If
            Me.InvokeAsync("SyncLogKioskAgentData", New Object() {dt, KioskName}, Me.SyncLogKioskAgentDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnSyncLogKioskAgentDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.SyncLogKioskAgentDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SyncLogKioskAgentDataCompleted(Me, New SyncLogKioskAgentDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class LoginReturnData
        
        Private loginStatusField As Boolean
        
        Private tokenField As String
        
        Private loginUsernameField As String
        
        Private loginFirstNameField As String
        
        Private loginLastNameField As String
        
        Private loginCompanyNameField As String
        
        Private errorMessageField As String
        
        '''<remarks/>
        Public Property LoginStatus() As Boolean
            Get
                Return Me.loginStatusField
            End Get
            Set
                Me.loginStatusField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Token() As String
            Get
                Return Me.tokenField
            End Get
            Set
                Me.tokenField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginUsername() As String
            Get
                Return Me.loginUsernameField
            End Get
            Set
                Me.loginUsernameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginFirstName() As String
            Get
                Return Me.loginFirstNameField
            End Get
            Set
                Me.loginFirstNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginLastName() As String
            Get
                Return Me.loginLastNameField
            End Get
            Set
                Me.loginLastNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LoginCompanyName() As String
            Get
                Return Me.loginCompanyNameField
            End Get
            Set
                Me.loginCompanyNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ErrorMessage() As String
            Get
                Return Me.errorMessageField
            End Get
            Set
                Me.errorMessageField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MasterPromotionData
        
        Private promotionField As System.Data.DataTable
        
        Private promotionHourField As System.Data.DataTable
        
        '''<remarks/>
        Public Property Promotion() As System.Data.DataTable
            Get
                Return Me.promotionField
            End Get
            Set
                Me.promotionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property PromotionHour() As System.Data.DataTable
            Get
                Return Me.promotionHourField
            End Get
            Set
                Me.promotionHourField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class MasterServiceRateData
        
        Private serviceRateField As System.Data.DataTable
        
        Private serviceRateDepositField As System.Data.DataTable
        
        Private serviceRateHourField As System.Data.DataTable
        
        Private serviceRateOverNightField As System.Data.DataTable
        
        '''<remarks/>
        Public Property ServiceRate() As System.Data.DataTable
            Get
                Return Me.serviceRateField
            End Get
            Set
                Me.serviceRateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ServiceRateDeposit() As System.Data.DataTable
            Get
                Return Me.serviceRateDepositField
            End Get
            Set
                Me.serviceRateDepositField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ServiceRateHour() As System.Data.DataTable
            Get
                Return Me.serviceRateHourField
            End Get
            Set
                Me.serviceRateHourField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ServiceRateOverNight() As System.Data.DataTable
            Get
                Return Me.serviceRateOverNightField
            End Get
            Set
                Me.serviceRateOverNightField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub LoginTITCompletedEventHandler(ByVal sender As Object, ByVal e As LoginTITCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginTITCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LoginReturnData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LoginReturnData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SendKiskAlarmCompletedEventHandler(ByVal sender As Object, ByVal e As SendKiskAlarmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendKiskAlarmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub KioskLoginStaffConsoleCompletedEventHandler(ByVal sender As Object, ByVal e As KioskLoginStaffConsoleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class KioskLoginStaffConsoleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LoginReturnData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LoginReturnData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetKioskStaffConsoleAuthorizeCompletedEventHandler(ByVal sender As Object, ByVal e As GetKioskStaffConsoleAuthorizeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetKioskStaffConsoleAuthorizeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub ReportKioskCurrentQtyCompletedEventHandler(ByVal sender As Object, ByVal e As ReportKioskCurrentQtyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportKioskCurrentQtyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterAppScreenCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterAppScreenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterAppScreenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterAppStepCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterAppStepCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterAppStepCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterKioskScreenControlCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterKioskScreenControlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterKioskScreenControlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterKioskNotificationTextCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterKioskNotificationTextCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterKioskNotificationTextCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterCabinetModelCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterCabinetModelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterCabinetModelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterDeviceTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterDeviceTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterDeviceTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterDeviceStatusCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterDeviceStatusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterDeviceStatusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetMasterMonitoringAlarmCompletedEventHandler(ByVal sender As Object, ByVal e As GetMasterMonitoringAlarmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMasterMonitoringAlarmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetLockerServiceRateCompletedEventHandler(ByVal sender As Object, ByVal e As GetLockerServiceRateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLockerServiceRateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MasterServiceRateData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MasterServiceRateData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncKioskSysconfigCompletedEventHandler(ByVal sender As Object, ByVal e As SyncKioskSysconfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncKioskSysconfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncMasterKioskCabinetCompletedEventHandler(ByVal sender As Object, ByVal e As SyncMasterKioskCabinetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncMasterKioskCabinetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncMasterKioskDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As SyncMasterKioskDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncMasterKioskDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncMasterKioskLockerCompletedEventHandler(ByVal sender As Object, ByVal e As SyncMasterKioskLockerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncMasterKioskLockerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetServerKioskSysconfigCompletedEventHandler(ByVal sender As Object, ByVal e As GetServerKioskSysconfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServerKioskSysconfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetServerKioskCabinetCompletedEventHandler(ByVal sender As Object, ByVal e As GetServerKioskCabinetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServerKioskCabinetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetServeKioskDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As GetServeKioskDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServeKioskDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetServerKioskLockerCompletedEventHandler(ByVal sender As Object, ByVal e As GetServerKioskLockerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetServerKioskLockerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataTable
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataTable)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub UpdateServerSyncKioskSysconfigCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateServerSyncKioskSysconfigCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateServerSyncKioskSysconfigCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub UpdateServerSyncKioskCabinetCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateServerSyncKioskCabinetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateServerSyncKioskCabinetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub UpdateServerSyncKioskDeviceCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateServerSyncKioskDeviceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateServerSyncKioskDeviceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub UpdateSyncKioskLockerCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateSyncKioskLockerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateSyncKioskLockerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SysnKioskTransactionCustomerImageCompletedEventHandler(ByVal sender As Object, ByVal e As SysnKioskTransactionCustomerImageCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SysnKioskTransactionCustomerImageCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncKioskServiceTransactionByRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SyncKioskServiceTransactionByRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncKioskServiceTransactionByRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncKioskServiceTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As SyncKioskServiceTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncKioskServiceTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncKioskCollectTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As SyncKioskCollectTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncKioskCollectTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncKioskStaffConsoleTransactionCompletedEventHandler(ByVal sender As Object, ByVal e As SyncKioskStaffConsoleTransactionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncKioskStaffConsoleTransactionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub GetLockerPromotionCompletedEventHandler(ByVal sender As Object, ByVal e As GetLockerPromotionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLockerPromotionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As MasterPromotionData
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),MasterPromotionData)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub InsertLocationPromotionSyncCompletedEventHandler(ByVal sender As Object, ByVal e As InsertLocationPromotionSyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InsertLocationPromotionSyncCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncLogTransactionActivityCompletedEventHandler(ByVal sender As Object, ByVal e As SyncLogTransactionActivityCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncLogTransactionActivityCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncLogFillMoneyDataCompletedEventHandler(ByVal sender As Object, ByVal e As SyncLogFillMoneyDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncLogFillMoneyDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncLogErrorDataCompletedEventHandler(ByVal sender As Object, ByVal e As SyncLogErrorDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncLogErrorDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")>  _
    Public Delegate Sub SyncLogKioskAgentDataCompletedEventHandler(ByVal sender As Object, ByVal e As SyncLogKioskAgentDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SyncLogKioskAgentDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
